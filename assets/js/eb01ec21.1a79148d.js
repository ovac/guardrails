"use strict";(self.webpackChunkguardrails_docs=self.webpackChunkguardrails_docs||[]).push([[6148],{8453:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>l});var n=t(6540);const s={},o=n.createContext(s);function i(e){const r=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(o.Provider,{value:r},e.children)}},9358:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"usage-controllers","title":"usage-controllers","description":"title: Controller Interception Guide","source":"@site/versioned_docs/version-0.2.0/usage-controllers.md","sourceDirName":".","slug":"/usage-controllers","permalink":"/guardrails/docs/usage-controllers","draft":false,"unlisted":false,"editUrl":"https://github.com/ovac/guardrails/edit/main/resources/docs/versioned_docs/version-0.2.0/usage-controllers.md","tags":[],"version":"0.2.0","frontMatter":{},"sidebar":"docs","previous":{"title":"ui","permalink":"/guardrails/docs/ui"},"next":{"title":"usage-models","permalink":"/guardrails/docs/usage-models"}}');var s=t(4848),o=t(8453);const i={},l="Controller Interception Guide",a={},c=[];function d(e){const r={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.p,{children:"title: Controller Interception Guide\ndescription: Intercept mutations without modifying your models."}),"\n",(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"controller-interception-guide",children:"Controller Interception Guide"})}),"\n",(0,s.jsxs)(r.p,{children:["Use ",(0,s.jsx)(r.code,{children:"OVAC\\\\Guardrails\\\\Concerns\\\\InteractsWithActorApproval"})," in your controller to route critical mutations through Guardrails without touching models."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-php",children:"use OVAC\\\\Guardrails\\\\Concerns\\\\InteractsWithActorApproval;\nuse OVAC\\\\Guardrails\\\\Services\\\\Flow;\n\nclass OrdersController extends Controller\n{\n    use InteractsWithActorApproval;\n\n    public function update(UpdateOrderRequest $request, Order $order)\n    {\n        $changes = $request->validated();\n\n$result = $this->actorApprovalIntercept($order, $changes, [\n            'only' => ['status_id'], // only guard status changes\n            'extender' => Flow::make()\n                ->anyOfPermissions(['orders.manage','orders.escalate'])\n                ->includeInitiator(true, true)\n                ->toStep(2, 'Ops'),\n        ]);\n\n        if ($result['captured']) {\n            return back()->with('status', 'Submitted for approval.');\n        }\n\n        $order->update($changes);\n        return back()->with('status', 'Updated.');\n    }\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"Options"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"event: creating|updating|custom (default updating)"}),"\n",(0,s.jsx)(r.li,{children:"only: array attribute keys to guard (overrides model rules)"}),"\n",(0,s.jsx)(r.li,{children:"except: array attribute keys to ignore"}),"\n",(0,s.jsx)(r.li,{children:"flow: array preset flow (overrides model flow)"}),"\n",(0,s.jsxs)(r.li,{children:["extender: ",(0,s.jsx)(r.code,{children:"FlowExtender"})," to build a flow fluently"]}),"\n"]})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);