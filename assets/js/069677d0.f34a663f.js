"use strict";(self.webpackChunkguardrails_docs=self.webpackChunkguardrails_docs||[]).push([[6566],{2057:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"custom-controllers","title":"custom-controllers","description":"title: Using Your Own Controllers","source":"@site/versioned_docs/version-0.3.0/custom-controllers.md","sourceDirName":".","slug":"/custom-controllers","permalink":"/guardrails/docs/custom-controllers","draft":false,"unlisted":false,"editUrl":"https://github.com/ovac/guardrails/edit/main/resources/docs/versioned_docs/version-0.3.0/custom-controllers.md","tags":[],"version":"0.3.0","frontMatter":{},"sidebar":"docs","previous":{"title":"configuration","permalink":"/guardrails/docs/configuration"},"next":{"title":"database","permalink":"/guardrails/docs/database"}}');var s=r(4848),o=r(8453);const a={},i="Using Your Own Controllers",l={},u=[{value:"Capture in Your Update Action",id:"capture-in-your-update-action",level:2},{value:"Approve Endpoint",id:"approve-endpoint",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"title: Using Your Own Controllers\ndescription: How to wire Guardrails without the built-in controller."}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"using-your-own-controllers",children:"Using Your Own Controllers"})}),"\n",(0,s.jsx)(n.p,{children:"You can keep your existing routes/controllers and still use Guardrails to capture and approve changes."}),"\n",(0,s.jsx)(n.h2,{id:"capture-in-your-update-action",children:"Capture in Your Update Action"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use OVAC\\Guardrails\\Services\\ActorApprovalService as Guardrails;\nuse OVAC\\Guardrails\\Services\\Flow;\n\npublic function update(Request $request, Post $post)\n{\n    $changes = $request->validate(['published' => 'boolean']);\n\n    // Decide which keys to guard\n    $guarded = array_intersect_key($changes, array_flip(['published']));\n    if (!empty($guarded)) {\n        // Optional: dynamic flow\n        $post->actorApprovalFlow = fn () => [\n            Flow::make()->anyOfRoles(['editor','managing_editor'])->toStep(1, 'Editorial Approval')->build(),\n        ];\n\n        Guardrails::capture($post, $guarded, 'updating');\n        return back()->with('status', 'Submitted for approval.');\n    }\n\n    // Apply unguarded changes immediately\n    $post->update($changes);\n    return back()->with('status', 'Updated.');\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"approve-endpoint",children:"Approve Endpoint"}),"\n",(0,s.jsx)(n.p,{children:"If you don\u2019t want to use the package controller for approving, add your own route and reuse the policy + models:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use OVAC\\Guardrails\\Models\\ApprovalStep;\nuse OVAC\\Guardrails\\Support\\SigningPolicy;\n\npublic function approve(Request $request, int $requestId, int $stepId)\n{\n    $request->validate(['comment' => 'nullable|string|max:1000']);\n    $user = $request->user(config('guardrails.auth.guard'));\n    $step = ApprovalStep::where('request_id', $requestId)->findOrFail($stepId);\n\n    abort_unless($step->status === 'pending', 422, 'Step already finalized');\n    abort_unless(SigningPolicy::canSign($user, (array) ($step->meta['signers'] ?? []), $step), 403);\n\n    $sig = \\OVAC\\Guardrails\\Models\\ApprovalSignature::updateOrCreate(\n        ['step_id' => $step->id, 'staff_id' => $user->id],\n        ['decision' => 'approved', 'signed_at' => now(), 'comment' => $request->string('comment')]\n    );\n\n    // Complete step/request if threshold reached (same logic as package controller)\n    $count = $step->signatures()->where('decision', 'approved')->count();\n    if ($count >= (int) $step->threshold) {\n        $step->status = 'completed';\n        $step->completed_at = now();\n        $step->save();\n\n        $allDone = !$step->request->steps()->where('status', 'pending')->exists();\n        if ($allDone) {\n            $req = $step->request;\n            $req->state = 'approved';\n            $req->save();\n\n            if ($model = $req->approvable) {\n                if (method_exists($model, 'withoutHumanGuard')) {\n                    $model->withoutHumanGuard();\n                }\n                foreach ((array) $req->new_data as $k => $v) {\n                    $model->{$k} = $v;\n                }\n                $model->save();\n            }\n        }\n    }\n\n    return response()->json(['success' => true]);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"This pattern keeps you fully in control of routing and middleware while reusing Guardrails\u2019 core logic."})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var t=r(6540);const s={},o=t.createContext(s);function a(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);