"use strict";(self.webpackChunkguardrails_docs=self.webpackChunkguardrails_docs||[]).push([[741],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(96540);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}},62767:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"bots-and-automation","title":"bots-and-automation","description":"title: Bots & Automation","source":"@site/versioned_docs/version-1.0.0/bots-and-automation.md","sourceDirName":".","slug":"/bots-and-automation","permalink":"/guardrails/docs/bots-and-automation","draft":false,"unlisted":false,"editUrl":"https://github.com/ovac/guardrails/edit/main/resources/docs/versioned_docs/version-1.0.0/bots-and-automation.md","tags":[],"version":"1.0.0","frontMatter":{},"sidebar":"docs","previous":{"title":"Email & SMS Verification Approvals","permalink":"/guardrails/docs/verification-examples"},"next":{"title":"Organization Playbook","permalink":"/guardrails/docs/organization-playbook"}}');var s=t(74848),a=t(28453);const o={},r="Bots & Automation",l={},c=[{value:"Service Accounts as Initiators",id:"service-accounts-as-initiators",level:2},{value:"Event-Driven Integrations",id:"event-driven-integrations",level:2},{value:"Example: Send Slack notifications",id:"example-send-slack-notifications",level:3},{value:"ChatOps Approvals",id:"chatops-approvals",level:2},{value:"CI/CD &amp; Commits",id:"cicd--commits",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"title: Bots & Automation\ndescription: Using service accounts, webhooks, and chatops with Guardrails."}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"bots--automation",children:"Bots & Automation"})}),"\n",(0,s.jsxs)(n.p,{children:["Bots can open approval requests (as initiators) or receive events to notify teams. Guardrails stores the ",(0,s.jsx)(n.code,{children:"initiator_id"}),", so consider creating a service account user for your bot."]}),"\n",(0,s.jsx)(n.h2,{id:"service-accounts-as-initiators",children:"Service Accounts as Initiators"}),"\n",(0,s.jsxs)(n.p,{children:["Use a dedicated service account user (e.g., ",(0,s.jsx)(n.code,{children:"automation@yourco"}),") and authenticate via a token with scoped abilities. Changes captured while authenticated as this user will record them as the initiator."]}),"\n",(0,s.jsx)(n.h2,{id:"event-driven-integrations",children:"Event-Driven Integrations"}),"\n",(0,s.jsx)(n.p,{children:"Guardrails fires domain events you can listen to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"OVAC\\\\Guardrails\\\\Events\\\\ApprovalRequestCaptured"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"OVAC\\\\Guardrails\\\\Events\\\\ApprovalStepApproved"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"OVAC\\\\Guardrails\\\\Events\\\\ApprovalStepRejected"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"OVAC\\\\Guardrails\\\\Events\\\\ApprovalRequestCompleted"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"OVAC\\\\Guardrails\\\\Events\\\\ApprovalRequestRejected"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-send-slack-notifications",children:"Example: Send Slack notifications"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use Illuminate\\\\Support\\\\Facades\\\\Notification;\nuse App\\\\Notifications\\\\SlackApprovalPing;\n\nEvent::listen(\\OVAC\\Guardrails\\Events\\ApprovalRequestCaptured::class, function ($e) {\n    Notification::route('slack', env('SLACK_WEBHOOK'))\n        ->notify(new SlackApprovalPing('New approval request #'.$e->request->id));\n});\n\nEvent::listen(\\OVAC\\Guardrails\\Events\\ApprovalRequestCompleted::class, function ($e) {\n    Notification::route('slack', env('SLACK_WEBHOOK'))\n        ->notify(new SlackApprovalPing('Request #'.$e->request->id.' approved.'));\n});\n\nEvent::listen(\\OVAC\\Guardrails\\Events\\ApprovalRequestRejected::class, function ($e) {\n    Notification::route('slack', env('SLACK_WEBHOOK'))\n        ->notify(new SlackApprovalPing('Request #'.$e->request->id.' rejected at step '.$e->step->name.'. Comment: '.($e->signature->comment ?: '\u2014')));\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"chatops-approvals",children:"ChatOps Approvals"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Expose a small endpoint your bot can call to POST the ",(0,s.jsx)(n.code,{children:"approve"})," action with a signed token."]}),"\n",(0,s.jsx)(n.li,{children:"Or map bot identities to real approver accounts and let them sign steps if they satisfy signer rules."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"cicd--commits",children:"CI/CD & Commits"}),"\n",(0,s.jsx)(n.p,{children:"Guardrails can gate config toggles or deploy flags via your admin app:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Approve a feature flag before a pipeline proceeds."}),"\n",(0,s.jsx)(n.li,{children:"Store the approval request ID in your release notes or build metadata."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);