"use strict";(self.webpackChunkguardrails_docs=self.webpackChunkguardrails_docs||[]).push([[7779],{8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}},8490:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"external-signing","title":"external-signing","description":"title: External Document Signing","source":"@site/versioned_docs/version-0.2.0/external-signing.md","sourceDirName":".","slug":"/external-signing","permalink":"/guardrails/docs/external-signing","draft":false,"unlisted":false,"editUrl":"https://github.com/ovac/guardrails/edit/main/resources/docs/versioned_docs/version-0.2.0/external-signing.md","tags":[],"version":"0.2.0","frontMatter":{},"sidebar":"docs","previous":{"title":"extending-models-and-migrations","permalink":"/guardrails/docs/extending-models-and-migrations"},"next":{"title":"FAQ","permalink":"/guardrails/docs/faq"}}');var s=t(4848),a=t(8453);const i={},o="External Document Signing",l={},d=[{value:"Flow Overview",id:"flow-overview",level:2},{value:"Step 1: Listen to the Capture Event",id:"step-1-listen-to-the-capture-event",level:2},{value:"Step 2: Webhook Endpoint",id:"step-2-webhook-endpoint",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"title: External Document Signing\ndescription: Integrate DocuSeal/DocuSign-style signature flows with Guardrails."}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"external-document-signing",children:"External Document Signing"})}),"\n",(0,s.jsx)(n.p,{children:"Some businesses require a paper trail with legally-binding signatures. This guide shows how to integrate a document provider and wire signatures back to Guardrails."}),"\n",(0,s.jsx)(n.h2,{id:"flow-overview",children:"Flow Overview"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["On ",(0,s.jsx)(n.code,{children:"ApprovalRequestCaptured"}),", create a document (PDF/HTML) containing a summary of the change and the approver(s)."]}),"\n",(0,s.jsx)(n.li,{children:"Send the document to the signer(s) via provider API and store the envelope/packet ID on the request meta."}),"\n",(0,s.jsx)(n.li,{children:"Expose a webhook endpoint for the provider to call on sign/decline."}),"\n",(0,s.jsx)(n.li,{children:"When signed, approve the corresponding Guardrails step. On decline, mark the request rejected or leave pending for re-review."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"step-1-listen-to-the-capture-event",children:"Step 1: Listen to the Capture Event"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use Illuminate\\Support\\Facades\\Event;\nuse Illuminate\\Support\\Facades\\Http;\n\nEvent::listen(\\OVAC\\Guardrails\\Events\\ApprovalRequestCaptured::class, function ($e) {\n    $req = $e->request;\n\n    // Compose a summary document payload\n    $doc = [\n        'title' => 'Approval Request #'.$req->id,\n        'summary' => [\n            'approvable' => [$req->approvable_type, $req->approvable_id],\n            'changes' => $req->new_data,\n            'original' => $req->original_data,\n        ],\n    ];\n\n    // Example: DocuSeal-like API\n    $resp = Http::withToken(config('services.docuseal.token'))\n        ->post('https://api.docuseal.co/envelopes', [\n            'document' => $doc,\n            'signers' => [/* emails, names, roles */],\n            'webhook_url' => route('signing.webhook'),\n            'metadata' => ['guardrails_request_id' => $req->id],\n        ])->json();\n\n    $req->meta = array_merge($req->meta ?? [], [\n        'doc_provider' => 'docuseal',\n        'doc_envelope_id' => $resp['id'] ?? null,\n    ]);\n    $req->save();\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-2-webhook-endpoint",children:"Step 2: Webhook Endpoint"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"Route::post('/webhooks/doc-signing', function (Illuminate\\Http\\Request $request) {\n    // Verify signature/secret per provider docs\n    abort_unless(hash_equals($request->header('X-Signature'), hash_hmac('sha256', $request->getContent(), config('services.docuseal.secret'))), 401);\n\n    $payload = $request->all();\n    $guardrailsId = data_get($payload, 'metadata.guardrails_request_id');\n    $status = data_get($payload, 'status'); // signed|declined\n\n    $req = \\OVAC\\Guardrails\\Models\\ApprovalRequest::findOrFail($guardrailsId);\n    $step = $req->steps()->where('status', 'pending')->orderBy('level')->firstOrFail();\n\n    if ($status === 'signed') {\n        // Approve on behalf of the signer; map provider identity to your user\n        $user = App\\Models\\User::where('email', data_get($payload, 'signer.email'))->firstOrFail();\n        \\OVAC\\Guardrails\\Models\\ApprovalSignature::updateOrCreate(\n            ['step_id' => $step->id, 'staff_id' => $user->id],\n            ['decision' => 'approved', 'signed_at' => now(), 'comment' => 'Doc signed']\n        );\n    } else {\n        // Optionally store a decline note or set state\n        $req->state = 'pending';\n        $req->save();\n    }\n\n    return response()->json(['ok' => true]);\n})->name('signing.webhook');\n"})}),"\n",(0,s.jsx)(n.p,{children:"This two-part integration lets the provider manage the legal signature while Guardrails manages the approval logic and data application."})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);