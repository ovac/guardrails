"use strict";(self.webpackChunkguardrails_docs=self.webpackChunkguardrails_docs||[]).push([[6153],{5596:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>o,contentTitle:()=>p,default:()=>u,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"verification-examples","title":"verification-examples","description":"title: Email & SMS Verification Approvals","source":"@site/docs/verification-examples.md","sourceDirName":".","slug":"/verification-examples","permalink":"/guardrails/docs/next/verification-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/ovac/guardrails/edit/main/resources/docs/docs/verification-examples.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"use-cases","permalink":"/guardrails/docs/next/use-cases"},"next":{"title":"voting-models","permalink":"/guardrails/docs/next/voting-models"}}');var t=s(4848),i=s(8453);const a={},p="Email & SMS Verification Approvals",o={},l=[{value:"Email Link Approval",id:"email-link-approval",level:2},{value:"SMS OTP Approval",id:"sms-otp-approval",level:2}];function d(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.p,{children:"title: Email & SMS Verification Approvals\ndescription: Simple copy\u2011paste examples to approve steps via email links or SMS codes."}),"\n",(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"email--sms-verification-approvals",children:"Email & SMS Verification Approvals"})}),"\n",(0,t.jsx)(r.p,{children:"These patterns show how to use common verification channels to approve a Guardrails step without building a full UI."}),"\n",(0,t.jsx)(r.h2,{id:"email-link-approval",children:"Email Link Approval"}),"\n",(0,t.jsx)(r.p,{children:"Send a signed URL to the approver\u2019s email; clicking the link records the signature."}),"\n",(0,t.jsx)(r.p,{children:"Routes:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",children:"// web.php\nRoute::get('/approvals/\\{request\\}/\\{step\\}/email-approve', [ApproveByEmailController::class, 'approve'])\n    ->name('approvals.email.approve')\n    ->middleware(['signed']); // Laravel signed URLs\n"})}),"\n",(0,t.jsx)(r.p,{children:"Controller:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",children:"use Illuminate\\Http\\Request;\nuse OVAC\\Guardrails\\Models\\ApprovalRequest;\nuse OVAC\\Guardrails\\Models\\ApprovalStep;\nuse OVAC\\Guardrails\\Models\\ApprovalSignature;\nuse OVAC\\Guardrails\\Support\\SigningPolicy;\n\nclass ApproveByEmailController\n{\n    public function sendInvite(ApprovalStep $step, \\App\\Models\\User $user)\n    {\n        // Generate a temporary signed URL for the specific user\n        $url = URL::temporarySignedRoute('approvals.email.approve', now()->addHours(24), [\n            'request' => $step->request_id,\n            'step' => $step->id,\n            'uid' => $user->getKey(),\n        ]);\n\n        Mail::to($user->email)->send(new \\App\\Mail\\ApprovalInvite($url));\n    }\n\n    public function approve(Request $request, int $requestId, int $stepId)\n    {\n        $userId = (int) $request->query('uid');\n        $user = \\OVAC\\Guardrails\\Support\\Auth::findUserById($userId);\n\n        $step = ApprovalStep::where('request_id', $requestId)->findOrFail($stepId);\n        abort_unless(SigningPolicy::canSign($user, (array) ($step->meta['signers'] ?? []), $step), 403);\n\n        ApprovalSignature::updateOrCreate(\n            ['step_id' => $step->id, 'staff_id' => $user->id],\n            ['decision' => 'approved', 'signed_at' => now(), 'comment' => 'Email link']\n        );\n\n        return redirect()->route('guardrails.index')->with('status', 'Approved via email');\n    }\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"sms-otp-approval",children:"SMS OTP Approval"}),"\n",(0,t.jsx)(r.p,{children:"Send a short code via SMS; the approver enters it on a simple form to approve."}),"\n",(0,t.jsx)(r.p,{children:"Routes:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",children:"Route::get('/approvals/\\{request\\}/\\{step\\}/sms', [SmsApproveController::class, 'form'])->name('approvals.sms.form');\nRoute::post('/approvals/\\{request\\}/\\{step\\}/sms', [SmsApproveController::class, 'verify'])->name('approvals.sms.verify');\n"})}),"\n",(0,t.jsx)(r.p,{children:"Controller:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",children:"use OVAC\\Guardrails\\Models\\ApprovalRequest;\nuse OVAC\\Guardrails\\Models\\ApprovalStep;\nuse OVAC\\Guardrails\\Models\\ApprovalSignature;\nuse OVAC\\Guardrails\\Support\\SigningPolicy;\n\nclass SmsApproveController\n{\n    public function sendCode(ApprovalStep $step, \\App\\Models\\User $user)\n    {\n        $code = random_int(100000, 999999);\n        // Store code in signature meta (create a pending row)\n        $sig = ApprovalSignature::firstOrCreate(['step_id' => $step->id, 'staff_id' => $user->id]);\n        $meta = $sig->meta ?? [];\n        $meta['otp'] = ['code' => (string) $code, 'expires_at' => now()->addMinutes(10)->toISOString()];\n        $sig->meta = $meta; $sig->save();\n\n        // Send via your SMS provider\n        app('sms')->send($user->phone, \"Approval code: $code\");\n    }\n\n    public function form(Request $request, int $requestId, int $stepId)\n    {\n        return view('approvals.sms', compact('requestId','stepId'));\n    }\n\n    public function verify(Request $request, int $requestId, int $stepId)\n    {\n        $request->validate(['user_id' => 'required|integer', 'code' => 'required|string']);\n        $user = \\OVAC\\Guardrails\\Support\\Auth::findUserById($request->integer('user_id'));\n        $step = ApprovalStep::where('request_id', $requestId)->findOrFail($stepId);\n\n        abort_unless(SigningPolicy::canSign($user, (array) ($step->meta['signers'] ?? []), $step), 403);\n\n        $sig = ApprovalSignature::firstOrCreate(['step_id' => $step->id, 'staff_id' => $user->id]);\n        $meta = $sig->meta ?? [];\n        $otp = (array) ($meta['otp'] ?? []);\n        abort_unless(!empty($otp) && hash_equals((string) $otp['code'], (string) $request->string('code')), 422, 'Invalid code');\n        abort_unless(now()->lte(\\Illuminate\\Support\\Carbon::parse($otp['expires_at'])), 422, 'Code expired');\n\n        $sig->decision = 'approved';\n        $sig->signed_at = now();\n        $sig->comment = 'SMS code';\n        $sig->save();\n\n        return redirect()->route('guardrails.index')->with('status', 'Approved via SMS');\n    }\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"These verification patterns can coexist with role/permission rules: the policy still ensures only eligible users can approve."})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>a,x:()=>p});var n=s(6540);const t={},i=n.createContext(t);function a(e){const r=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function p(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);