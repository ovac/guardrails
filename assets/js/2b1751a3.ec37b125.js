"use strict";(self.webpackChunkguardrails_docs=self.webpackChunkguardrails_docs||[]).push([[6041],{28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var s=r(96540);const i={},a=s.createContext(i);function t(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(a.Provider,{value:n},e.children)}},86042:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"usage-models","title":"usage-models","description":"title: Model Guarding Guide","source":"@site/docs/usage-models.md","sourceDirName":".","slug":"/usage-models","permalink":"/guardrails/docs/next/usage-models","draft":false,"unlisted":false,"editUrl":"https://github.com/ovac/guardrails/edit/main/resources/docs/docs/usage-models.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"FAQ","permalink":"/guardrails/docs/next/faq"},"next":{"title":"Controller Interception Guide","permalink":"/guardrails/docs/next/usage-controllers"}}');var i=r(74848),a=r(28453);const t={},l="Model Guarding Guide",o={},d=[{value:"Quick Start",id:"quick-start",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Runtime Justifications",id:"runtime-justifications",level:2},{value:"Bypass",id:"bypass",level:2},{value:"Related Guides",id:"related-guides",level:2}];function u(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"title: Model Guarding Guide\ndescription: Use the Guardrail trait to stage changes for approval."}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"model-guarding-guide",children:"Model Guarding Guide"})}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"OVAC\\\\Guardrails\\\\Concerns\\\\Guardrail"})," to intercept and stage critical changes on Eloquent models. When an authenticated initiator attempts to modify guarded attributes, Guardrails creates an ",(0,i.jsx)(n.code,{children:"ApprovalRequest"})," with steps and prevents the write. Once the flow completes, Guardrails applies the changes."]}),"\n",(0,i.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"use Illuminate\\\\Database\\\\Eloquent\\\\Model;\nuse OVAC\\\\Guardrails\\\\Concerns\\\\Guardrail;\nuse OVAC\\\\Guardrails\\\\Services\\\\Flow;\n\nclass EcurrencySetting extends Model\n{\n    use Guardrail;\n\n    // Choose which attributes require approval\n    public function guardrailAttributes(): array\n    {\n        return ['buy_normal_rate','sell_normal_rate','visible'];\n    }\n\n    public function guardrailApprovalDescription(array $dirty, string $event): string\n    {\n        return 'Finance + ops must approve rate or visibility changes.';\n    }\n\n    // Optional: Define a multi-step flow for given changes\n    public function guardrailApprovalFlow(array $dirty, string $event): array\n    {\n        return [\n            Flow::make()\n                // Uses the configured guard by default\n                ->anyOfPermissions(['local_rates.manage'])\n                ->includeInitiator(true, true)\n                ->signedBy(2, 'Ops Review')\n                ->build(),\n\n            [\n                'name' => 'Management',\n                'threshold' => 1,\n                'signers' => [\n                    'roles' => ['finance_manager','ops_manager'],\n                    'roles_mode' => 'any',\n                ],\n            ],\n        ];\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The trait hooks into the model\u2019s updating event."}),"\n",(0,i.jsxs)(n.li,{children:["If there is an authenticated user on the configured guard and guarded attributes changed, Guardrails creates an ",(0,i.jsx)(n.code,{children:"ApprovalRequest"})," in the ",(0,i.jsx)(n.code,{children:"pending"})," state and prevents the write (returns false in the updater)."]}),"\n",(0,i.jsx)(n.li,{children:"When the flow completes (threshold met in the final step), the pending changes are applied to the model in the approvals controller."}),"\n",(0,i.jsxs)(n.li,{children:["Guardrails stores a human-readable description for audits. Provide one via ",(0,i.jsx)(n.code,{children:"guardrailApprovalDescription()"})," (or define your own helper) to customise the audit trail. If you omit it, Guardrails generates a default summary listing the changed attributes."]}),"\n",(0,i.jsxs)(n.li,{children:["Flows may reference permissions, roles, and initiator overlap. See the ",(0,i.jsx)(n.a,{href:"/guardrails/docs/next/signing-policy",children:"Signing Policy Reference"})," for details on how Guardrails evaluates each rule."]}),"\n",(0,i.jsxs)(n.li,{children:["Flows may reference permissions, roles, initiator overlap, and even mix different guards per step\u2014see ",(0,i.jsx)(n.a,{href:"/guardrails/docs/next/usage-controllers#mixing-guards-in-a-flow",children:"Controller Interception Guide"})," for an example."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"runtime-justifications",children:"Runtime Justifications"}),"\n",(0,i.jsxs)(n.p,{children:["Collect a justification from the initiator (for example ",(0,i.jsx)(n.code,{children:"approval_description"})," on a form request) and push it into the Guardrails context before calling ",(0,i.jsx)(n.code,{children:"save()"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"$model->guardrails()\n    ->description($request->input('approval_description'))\n    ->meta(['reason_code' => $request->input('reason_code')]);\n\n$model->fill($request->validated())->save();\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"// Need a different guard for this flow?\n$flow = Flow::make()\n    ->guard('sanctum')\n    ->anyOfPermissions(['api.approve'])\n    ->signedBy(1, 'API Review')\n    ->build();\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["For a multi-step example that mixes guards, see the ",(0,i.jsx)(n.a,{href:"/guardrails/docs/next/usage-controllers#mixing-guards-in-a-flow",children:"Controller Interception Guide"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Guardrails clears the context after each capture so subsequent saves start fresh."}),"\n",(0,i.jsx)(n.h2,{id:"bypass",children:"Bypass"}),"\n",(0,i.jsx)(n.p,{children:"You can implement your own logic to bypass capturing by using the controller helper instead, or temporarily turning off the global controller toggle."}),"\n",(0,i.jsx)(n.h2,{id:"related-guides",children:"Related Guides"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/guardrails/docs/next/usage-controllers",children:"Controller Interception Guide"})," \u2014 Capture approvals when you prefer keeping models pristine."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/guardrails/docs/next/advanced",children:"Advanced Flows"})," \u2014 Generate signing policies dynamically from runtime context."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/guardrails/docs/next/patterns",children:"Common Patterns"})," \u2014 Reuse popular approval configurations."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/guardrails/docs/next/testing-full",children:"Full Testing Guide"})," \u2014 Assert Guardrails behaviour in your application tests."]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);