"use strict";(self.webpackChunkguardrails_docs=self.webpackChunkguardrails_docs||[]).push([[2895],{1289:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"advanced","title":"advanced","description":"title: Advanced Flows","source":"@site/versioned_docs/version-0.2.0/advanced.md","sourceDirName":".","slug":"/advanced","permalink":"/guardrails/docs/advanced","draft":false,"unlisted":false,"editUrl":"https://github.com/ovac/guardrails/edit/main/resources/docs/versioned_docs/version-0.2.0/advanced.md","tags":[],"version":"0.2.0","frontMatter":{},"sidebar":"docs","previous":{"title":"README","permalink":"/guardrails/docs/"},"next":{"title":"API Reference","permalink":"/guardrails/docs/api"}}');var t=s(4848),i=s(8453);const a={},o="Advanced Flows",d={},l=[{value:"Risk-Based Thresholds",id:"risk-based-thresholds",level:2},{value:"Attribute-Scoped Rules",id:"attribute-scoped-rules",level:2},{value:"Environment-Aware",id:"environment-aware",level:2},{value:"Same\u2011as\u2011Initiator Overlap",id:"sameasinitiator-overlap",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"title: Advanced Flows\ndescription: Dynamic flows, risk scoring, conditional steps, and context-aware rules."}),"\n",(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"advanced-flows",children:"Advanced Flows"})}),"\n",(0,t.jsx)(n.p,{children:"Flows can be computed at runtime based on changes, actor, environment, or any business signal."}),"\n",(0,t.jsx)(n.h2,{id:"risk-based-thresholds",children:"Risk-Based Thresholds"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"public function actorApprovalFlow(array $dirty, string $event): array\n{\n    $risk = 0;\n    if (($dirty['amount'] ?? 0) > 100000) $risk += 2;\n    if (($dirty['status'] ?? null) === 'critical') $risk += 1;\n\n    $flow = Flow::make()->anyOfPermissions(['ops.change']);\n\n    if ($risk >= 2) {\n        $flow->toStep(2, 'Ops (High Risk)')->anyOfRoles(['cfo'])->toStep(1, 'CFO');\n    } else {\n        $flow->toStep(1, 'Ops');\n    }\n\n    return $flow->build();\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"attribute-scoped-rules",children:"Attribute-Scoped Rules"}),"\n",(0,t.jsx)(n.p,{children:"Only guard some attributes; let others pass."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"$result = $this->actorApprovalIntercept($model, $changes, [\n  'only' => ['published','price','visibility'],\n  'extender' => Flow::make()->anyOfRoles(['editor','ops_manager'])->toStep(1, 'Review'),\n]);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"environment-aware",children:"Environment-Aware"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"if (app()->environment('production')) {\n  config(['guardrails.controller.enabled' => true]);\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"sameasinitiator-overlap",children:"Same\u2011as\u2011Initiator Overlap"}),"\n",(0,t.jsx)(n.p,{children:"Require a peer sharing at least one permission as the initiator."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"Flow::make()\n  ->permissions(['settings.update','settings.tune'])\n  ->requireAnyPermissions()\n  ->samePermissionAsInitiator(true)\n  ->includeInitiator(true, true)\n  ->toStep(2, 'Peer Review')\n  ->build();\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var r=s(6540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);