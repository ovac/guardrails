"use strict";(self.webpackChunkguardrails_docs=self.webpackChunkguardrails_docs||[]).push([[1004],{3783:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"extending-models-and-migrations","title":"extending-models-and-migrations","description":"title: Extending Models & Migrations","source":"@site/versioned_docs/version-0.3.0/extending-models-and-migrations.md","sourceDirName":".","slug":"/extending-models-and-migrations","permalink":"/guardrails/docs/extending-models-and-migrations","draft":false,"unlisted":false,"editUrl":"https://github.com/ovac/guardrails/edit/main/resources/docs/versioned_docs/version-0.3.0/extending-models-and-migrations.md","tags":[],"version":"0.3.0","frontMatter":{},"sidebar":"docs","previous":{"title":"database","permalink":"/guardrails/docs/database"},"next":{"title":"external-signing","permalink":"/guardrails/docs/external-signing"}}');var o=s(4848),t=s(8453);const r={},i="Extending Models & Migrations",d={},l=[{value:"Add Columns to Migrations",id:"add-columns-to-migrations",level:2},{value:"Extend the Model in Your App",id:"extend-the-model-in-your-app",level:2},{value:"Populate Custom Columns",id:"populate-custom-columns",level:2},{value:"Add Indexes for Performance",id:"add-indexes-for-performance",level:2},{value:"Customize Behavior With Policies or Gates",id:"customize-behavior-with-policies-or-gates",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"title: Extending Models & Migrations\ndescription: Practical examples for adding columns, relations, and behaviors."}),"\n",(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"extending-models--migrations",children:"Extending Models & Migrations"})}),"\n",(0,o.jsx)(n.p,{children:"You can customize Guardrails\u2019 tables and models to match your domain needs. This page shows how to add columns and use your own model class to get casts/relations while remaining compatible with the package."}),"\n",(0,o.jsx)(n.h2,{id:"add-columns-to-migrations",children:"Add Columns to Migrations"}),"\n",(0,o.jsx)(n.p,{children:"After publishing, write a new migration that alters the Guardrails tables:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",children:"// database/migrations/2025_09_16_000000_add_reason_to_approval_requests.php\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration {\n    public function up(): void\n    {\n        Schema::table('human_approval_requests', function (Blueprint $table) {\n            $table->string('reason')->nullable()->after('state');\n            $table->foreignId('workspace_id')->nullable()->index()->after('reason');\n        });\n    }\n\n    public function down(): void\n    {\n        Schema::table('human_approval_requests', function (Blueprint $table) {\n            $table->dropColumn(['reason','workspace_id']);\n        });\n    }\n};\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Because the package models use ",(0,o.jsx)(n.code,{children:"$guarded = []"}),", you can assign to these new columns without overriding fillables."]}),"\n",(0,o.jsx)(n.h2,{id:"extend-the-model-in-your-app",children:"Extend the Model in Your App"}),"\n",(0,o.jsx)(n.p,{children:"Create an app-level model that extends the package model to add casts, relations, or scopes:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",children:"// app/Models/ApprovalRequest.php\nnamespace App\\Models;\n\nclass ApprovalRequest extends \\OVAC\\Guardrails\\Models\\ApprovalRequest\n{\n    protected $casts = [\n        'meta' => 'array',\n        'reason' => 'string',\n    ];\n\n    public function workspace()\n    {\n        return $this->belongsTo(Workspace::class);\n    }\n\n    public function scopeForWorkspace($q, $workspaceId)\n    {\n        return $q->where('workspace_id', $workspaceId);\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"App\\Models\\ApprovalRequest"})," in your code for advanced queries; the package will continue to work with its own model internally."]}),"\n",(0,o.jsx)(n.h2,{id:"populate-custom-columns",children:"Populate Custom Columns"}),"\n",(0,o.jsx)(n.p,{children:"Use package events to populate your new columns when a request is captured or completed:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",children:"Event::listen(\\OVAC\\Guardrails\\Events\\ApprovalRequestCaptured::class, function ($e) {\n    $e->request->reason = request('reason');\n    $e->request->workspace_id = optional(auth()->user())->workspace_id;\n    $e->request->save();\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"add-indexes-for-performance",children:"Add Indexes for Performance"}),"\n",(0,o.jsxs)(n.p,{children:["Consider indexing ",(0,o.jsx)(n.code,{children:"state"}),", ",(0,o.jsx)(n.code,{children:"actor_id"}),", and any new foreign keys to speed up dashboards:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",children:"Schema::table('human_approval_requests', function (Blueprint $table) {\n    $table->index(['state','actor_id']);\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"customize-behavior-with-policies-or-gates",children:"Customize Behavior With Policies or Gates"}),"\n",(0,o.jsx)(n.p,{children:"You can layer route middleware or gates to enforce extra rules beyond signer policies. For example, block approvals after business hours."})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>i});var a=s(6540);const o={},t=a.createContext(o);function r(e){const n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);